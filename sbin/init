#!/sbin/busybox sh
cd /;

busybox mount -t proc proc /proc;
busybox mount -t sysfs sysfs /sys;
tar xvf /res/misc/dev.tar;

# set "/" rw
/sbin/busybox mount -t rootfs -o remount,rw rootfs;

if grep -q bootmode=2 /proc/cmdline; then
	# recovery mode
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	cp -a /recovery.rc /init.rc;
	exec /sbin/init.recovery;
fi;

if busybox grep -q 1 /sys/class/power_supply/battery/batt_lp_charging; then
	# low power mode
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp /res/images/recovery-icon.png /res/images/icon_clockwork.png;
	cp -a lpm.rc init.rc;
	rm init.smdk4210.rc;
	exec /sbin/init.recovery;
fi;

# cleaning and rebuilding the /mnt and sdcards mounts folders
rm -rf /mnt;
rm -rf /sdcard;
rm -rf /emmc;
rm -rf /storage;
rm -rf /vendor;
mkdir -p /mnt/asec;
mkdir -p /mnt/.lfs;
mkdir -p /mnt/obb;
mkdir -p /mnt/secure;
mkdir -p /mnt/tmp;
chmod -R 777 /mnt/;
mkdir /storage;
chmod -R 777 /storage;

# dual boot check and run
SECONDROM=1;
NOBOOTLOGO=0;
mount -t ext4 -o rw /dev/block/mmcblk0p12 /preload;
mount -t vfat /dev/block/mmcblk1p1 /mnt/tmp && ( mkdir -p /mnt/tmp/clockworkmod/blobs/ ) && ( touch /mnt/tmp/clockworkmod/.nomedia ) && ( touch /mnt/tmp/clockworkmod/blobs/.nomedia );
sync;
umount -l /mnt/tmp;
mount -t vfat /dev/block/mmcblk0p11 /mnt/tmp && ( mkdir -p /mnt/tmp/clockworkmod/blobs/ ) && ( touch /mnt/tmp/clockworkmod/.nomedia ) && ( touch /mnt/tmp/clockworkmod/blobs/.nomedia );
[ -f /preload/build.prop ] || SECONDROM=0;
[ -f /mnt/tmp/.secondrom/data.img ] || SECONDROM=0;
[ -f /mnt/tmp/.secondrom/cache.img ] || SECONDROM=0;
[ -f /mnt/tmp/.nobootlogo ] && NOBOOTLOGO=1 && SECONDROM=0;
sync;
umount /preload;
umount -l /mnt/tmp;

if [[ "$NOBOOTLOGO" == "1" && "$SECONDROM" == "0" ]]; then
	/sbin/choose_rom;
else
	/sbin/choose_rom $SECONDROM;
fi;

if [ "$?" == "1" ]; then
	SECONDROM=1;
else
	SECONDROM=0;
fi;

# mounting system!
/sbin/busybox mount -t ext4 /res/dev/system /system;

# adding latest vendor binary from 3.6.RC6 kernel for all! tested working great
mkdir -p /system/vendor/firmware;
/sbin/busybox xzcat /res/misc/vendor/firmware/mfc_fw.bin.xz > /system/vendor/firmware/mfc_fw.bin;
chmod 755 /system/vendor/firmware/mfc_fw.bin;

# fix permission to services.jar in case user did a mess, after using my MOD!
chmod 644 /system/framework/services.jar;

# copy new Kernel modules to /system/lib/modules and to second rom system if exist
if [ ! -d /system/lib/modules ]; then
	mkdir /system/lib/modules;
	chmod 755 /system/lib/modules/;
fi;
rm -f /system/lib/modules/*.ko;
cp /lib/modules/*.ko /system/lib/modules/;
chmod 755 /system/lib/modules/*.ko;

mount -o remount,rw /preload;
if [ -d /preload/lib/ ]; then
	if [ ! -d /preload/lib/modules ]; then
		mkdir /preload/lib/modules;
		chmod 755 /preload/lib/modules;
	fi;
	rm -f /preload/lib/modules/*.ko;
	cp /lib/modules/*.ko /preload/lib/modules/;
	chmod 755 /preload/lib/modules/*.ko;
fi;

if [ -f /system/recovery.cpio.gz ]; then
	/sbin/busybox mount -o remount,rw /;
	/sbin/busybox zcat /system/recovery.cpio.gz | cpio -idmu;
fi;

AOSP=0;
MIUI=0;
B2G=0;
JELLY=0;
CM10=0;
S4A=0;

[ -d /system/b2g ] && B2G=1;
[ -f /system/framework/framework-miui.jar ] && MIUI=1;
[ -f /system/framework/miui-framework.jar ] && MIUI=1;
[ -f /system/lib/ssl/engines/libkeystore.so ] && JELLY=1;
[ -f /system/framework/seccamera.jar ] || CM10=1;
[ -f /system/framework/framework2.jar ] || AOSP=1;
[ "`/sbin/busybox grep -i android-htc-rev /system/build.prop`" ] && S4A=1;
[ "`/sbin/busybox grep Slim /system/build.prop`" ] && SLIM=1;

# one more time set "/" rw just for good sleep
/sbin/busybox mount -t rootfs -o remount,rw rootfs;

#############################
# Partition global tuning!
#############################

PARTITION_TUNING()
{
	DEVICE_DATA="/res/dev/data";
	DIR_DATA="/data";
	LOG_DATA="/log-data";
	LOG_DATA_TMP="/log-data-tmp";

	DEVICE_CACHE="/res/dev/cache";
	DIR_CACHE="/cache";
	LOG_CACHE="/log-cache";
	LOG_CACHE_TMP="/log-cache-tmp";

	# new empty log
	/sbin/busybox sh -c "/sbin/date" > $LOG_DATA;
	/sbin/busybox sh -c "/sbin/date" > $LOG_CACHE;

	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Default mount options' | cut -f 7 -d ' '" > $LOG_CACHE_TMP;
	LOG_CACHE_TMP=`/sbin/busybox cat $LOG_CACHE_TMP`;
	if [ "$LOG_CACHE_TMP" != "journal_data_ordered" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -O has_journal $DEVICE_CACHE >> $LOG_CACHE 2>&1";
		/sbin/busybox sh -c "/sbin/tune2fs -o journal_data_ordered $DEVICE_CACHE >> $LOG_CACHE 2>&1";	
		echo "found missing journal_data_ordered, check partition now." >> $LOG_CACHE 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE >> $LOG_CACHE 2>&1";
	fi;

	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Default mount options' | cut -f 7 -d ' '" > $LOG_DATA_TMP;
	LOG_DATA_TMP=`/sbin/busybox cat $LOG_DATA_TMP`;
	if [ "$LOG_DATA_TMP" != "journal_data_ordered" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -O has_journal $DEVICE_DATA >> $LOG_DATA 2>&1";
		/sbin/busybox sh -c "/sbin/tune2fs -o journal_data_ordered $DEVICE_DATA >> $LOG_DATA 2>&1";
		echo "found missing journal_data_ordered, check partition now." >> $LOG_DATA 2>&1;
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA >> $LOG_DATA 2>&1";
	fi;

	# set inode for cache
	/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Inode size' | grep '256' | cut -f 12 -d ' '" > $LOG_CACHE_TMP;
	LOG_CACHE_TMP=`/sbin/busybox cat $LOG_CACHE_TMP`;	
	if [ "$LOG_CACHE_TMP" != "256" ]; then
		/sbin/busybox sh -c "/sbin/tune2fs -I 256 $DEVICE_CACHE >> $LOG_CACHE 2>&1";
	fi;

	# only if asked by user via extweaks
	if [ -e /system/run_fs_check ]; then
		# reset the lock-file
		rm -f /system/run_fs_check

		# check cache
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_CACHE >> $LOG_CACHE 2>&1";
		/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_CACHE | grep 'Filesystem state' | cut -f 11 -d ' '" > $LOG_CACHE_TMP;
		LOG_CACHE_TMP=`/sbin/busybox cat $LOG_CACHE_TMP`;
		if [ "$LOG_CACHE_TMP" != "clean" ]; then
			/sbin/busybox sh -c "/sbin/e2fsck -fyc $DEVICE_CACHE >> $LOG_CACHE 2>&1";
		else
			echo "cache: $LOG_CACHE_TMP" >> $LOG_CACHE 2>&1;
		fi;

		# set inode for data
		/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Inode size' | grep '256' | cut -f 12 -d ' '" > $LOG_DATA_TMP;
		LOG_DATA_TMP=`/sbin/busybox cat $LOG_DATA_TMP`;
		if [ "$LOG_DATA_TMP" != "256" ]; then
			/sbin/busybox sh -c "/sbin/tune2fs -I 256 $DEVICE_DATA >> $LOG_DATA 2>&1";
		fi;

		# check data
		/sbin/busybox sh -c "/sbin/e2fsck -p $DEVICE_DATA >> $LOG_DATA 2>&1";
		/sbin/busybox sh -c "/sbin/tune2fs -l $DEVICE_DATA | grep 'Filesystem state' | cut -f 11 -d ' '" > $LOG_DATA_TMP;
		LOG_DATA_TMP=`/sbin/busybox cat $LOG_DATA_TMP`;
		if [ "$LOG_DATA_TMP" != "clean" ]; then
			/sbin/busybox sh -c "/sbin/e2fsck -fyc $DEVICE_DATA >> $LOG_DATA 2>&1";
		else
			echo "cache: $LOG_DATA_TMP" >> $LOG_DATA 2>&1;
		fi;
	fi;

	sync;
}

######################################
# Starting ROM choose and INIT config.
######################################

if [ "$S4A" == "1" ]; then
	echo "0" > /proc/sys/kernel/rom_feature_set;
	mv /res/misc/Sense4All-ROM/init.s4a /init.rc;
	mv /res/misc/Sense4All-ROM/init.s4a.2 /init.rc.2;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		mv /init.rc.2 /init.rc;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

if [ "$B2G" == "1" ]; then
	echo "0" > /proc/sys/kernel/rom_feature_set;
	cp -a /res/misc/B2G-ROM/* /;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		mv /init.rc.2 /init.rc;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

if [ "$JELLY" == "1" ]; then
#	mv /sbin/adbd.jb /sbin/adbd;
	# Injecting JB Modded by VOKU, SUPER libsqlite!
	/sbin/busybox xzcat /res/misc/sql/jb/libsqlite.so.xz > /system/lib/libsqlite.so;
	chmod 755 /system/lib/libsqlite.so;
	echo "JB-INSTALLED" > /data/.siyah/jb-installed; # used and terminated at /sbin/ext/partition_tune.sh
	if [ "$CM10" == 1 ]; then
		echo "1" > /proc/sys/kernel/rom_feature_set;
		cp -a /res/misc/JellyB-CM-AOKP/* /;
	else
		echo "0" > /proc/sys/kernel/rom_feature_set;
		cp -a /res/misc/JellyB-SAMMY/* /;
	fi;

	if [ "$SECONDROM" == "1" ]; then
		if [ -e /init.smdk4210.rc.2 ]; then
			mv /init.smdk4210.rc.2 /init.smdk4210.rc;
			rm -f /init.rc.2;
		else
			rm -f /init.smdk4210.rc.2;
			rm -f /init.rc.2;
		fi;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

if [ "$SLIM" == "1" ]; then
	cp -a /res/misc/CM-ROM/* /;
	echo "1" > /proc/sys/kernel/rom_feature_set;
	/sbin/busybox xzcat /res/misc/sql/ics/libsqlite.so.xz > /system/lib/libsqlite.so;
	chmod 755 /system/lib/libsqlite.so;
        
	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		rm -f /init.rc.2;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

if [ "$AOSP" == "1" ]; then
	cp -a /res/misc/CM-ROM/* /;
	# Injecting ICS Modded by Dorimanx, SUPER libsqlite!
	/sbin/busybox xzcat /res/misc/sql/ics/libsqlite.so.xz > /system/lib/libsqlite.so;
	chmod 755 /system/lib/libsqlite.so;
	echo "1" > /proc/sys/kernel/rom_feature_set;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		rm -f /init.rc.2;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

if [ "$MIUI" == "1" ]; then
	cp -a /res/misc/Miui-ROM/* /;
	echo "0" > /proc/sys/kernel/rom_feature_set;

	if [ "$SECONDROM" == "1" ]; then
		mv /init.smdk4210.rc.2 /init.smdk4210.rc;
		mv /init.rc.2 /init.rc;
	else
		rm -f /init.smdk4210.rc.2;
		rm -f /init.rc.2;
	fi;

	# Start ROM!
	PARTITION_TUNING;
	exec /sbin/init.samsung;
fi;

# If not detected ROM / SAMMY ROM installed, then:
echo "0" > /proc/sys/kernel/rom_feature_set;

if [ "$SECONDROM" == "1" ]; then
	mv /init.smdk4210.rc.2 /init.smdk4210.rc;
	mv /init.rc.2 /init.rc;
else
	rm -f /init.smdk4210.rc.2;
	rm -f /init.rc.2;
fi;

# Start ROM
PARTITION_TUNING;
exec /sbin/init.samsung;

